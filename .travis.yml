language: cpp

matrix:
  include:
    # On Linux, exclude test_machine_specs; started to fail when we switched to g++-5
    - os: linux
      dist: trusty
      sudo: required
      compiler: gcc
      env: PYTHONPATH=/usr/local/lib/python2.7/dist-packages PATH=${PATH}:${HOME}/castxml/bin JOBS=4 TEST_EXCLUDE='test_machine_spec'
      addons:
        apt:
          packages:
            - libboost1.55-all-dev
            - python-dev
            - libode-dev
            - libeigen3-dev
            - python-pip
      cache:
        apt: true
        directories:
          - ${HOME}/castxml
          - /usr/local
    # On OS X, exclude test_machine_specs; fails due to "lazy" memory freeing in Release mode
    # (test passes in Debug builds).
    # On OS X, exclude test_random; fails due to bug in Boost.Random in 1.56.
    - os: osx
      osx_image: xcode9.1
      compiler: clang
      env: JOBS=2 TEST_EXCLUDE='test_(machine_specs|random)'
      cache:
        directories:
          - /usr/local
    - os: linux
      sudo: required
      services:
        - docker
      env: DOCKERFILE="debian-jessie" JOBS=4
    - os: linux
      sudo: required
      services:
        - docker
      env: DOCKERFILE="ubuntu-xenial" JOBS=4 TEST_EXCLUDE='test_(machine_specs|random)'

install:
  - if [ -n "$DOCKERFILE" ]; then
      docker build -t "$DOCKERFILE" -f "scripts/docker/$DOCKERFILE" .;
    fi
  - if [ -z "$DOCKERFILE" -a "$TRAVIS_OS_NAME" = "osx" ]; then
      brew update;
      brew install boost-python ode eigen castxml;
    fi
  - if [ -z "$DOCKERFILE" -a "$TRAVIS_OS_NAME" = "linux" ]; then
      sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test;
      sudo apt-get -y update;
      sudo apt-get -y install g++-5;
      export CXX=g++-5;
      wget -O - https://midas3.kitware.com/midas/download/item/318227/castxml-linux.tar.gz | tar zxf - -C ${HOME};
    fi
  - if [ -z "$DOCKERFILE" ]; then
      sudo -H pip -v install pygccxml pyplusplus;
    fi


script:
  - if [ -n "$DOCKERFILE" ]; then
      docker run "$DOCKERFILE"  /bin/sh -c "mkdir /root/ompl/build && cd /root/ompl/build && cmake -DOMPL_REGISTRATION=OFF -DCMAKE_INSTALL_PREFIX=tmp .. && make -j $JOBS && ctest -j $JOBS -E '$TEST_EXCLUDE'";
    else
      mkdir -p build &&
      cd build &&
      cmake -DOMPL_REGISTRATION=OFF -DCMAKE_INSTALL_PREFIX=tmp -DCASTXML=${HOME}/castxml/bin/castxml .. &&
      make -j $JOBS &&
      ctest -j $JOBS -E "$TEST_EXCLUDE";
    fi

# disabled because this takes several hours to complete:
#make -j $JOBS update_bindings &&
